@namespace(
	uri="http://sma/mdd/android/1.0",
	prefix="mddandroid")
@gmf(foo="bar")
package dcmddandroid;

abstract class NamedElement {
   attr String name;
}

abstract class AbstractClass extends ModelElement, EVisibility {
	attr boolean isAbstract;
	ref InnerClass[*]#innerClass innerClass;
	ref InnerClass[?]#container container;	
	ref Implements[*]#implements implements;
	@gmf.compartment(layout="list", collapsible="false")
	val Attribute[*] attributes;
	@gmf.compartment(layout="list", collapsible="false")
	val Method[*] methods;
	ref Association[*]#memberA associationA;
	ref Association[*]#memberB associationB;
	ref Inheritance#childClass childclass;
}

@gmf.node (
	label="name",
	label.icon="false",
	color = "255,255,255",
	tool.name="Class",
	tool.description="Class",
	figure = "rectangle",
	tool.name="Class"
)
class Class extends AbstractClass {}

@gmf.node (
	label="name",
	label.icon="false",
	color = "255,255,255",
	tool.name="CycleClass",
	tool.description="CycleClass",
	figure = "rectangle",
	tool.name="CycleClass"
)
class CycleClass extends AbstractClass {}

@gmf.node (
	label="name",
	label.icon="false",
	color = "255,255,255",
	tool.name="PersistentClass",
	tool.description="PersistentClass",
	figure = "rectangle",
	tool.name="PersistentClass"
)
class PersistentClass extends AbstractClass {}

@gmf.node (
	label="name",
	label.icon="false",
	color = "255,255,255",
	tool.name="Interface",
	tool.description="Interface",
	figure = "rectangle"
)
class Interface extends ModelElement, EVisibility {
   @gmf.compartment(foo="bar")
   ref Interface[*]#extend superInterfaces;
   @gmf.compartment (
	layout = "list"
	)
   val Method[*] methods;
}

abstract class ClassElement extends NamedElement, EVisibility{
   attr boolean final;
   attr boolean static;
}

@gmf.node (
	label="name,returns", figure="rectangle",
    label.icon="false", label.pattern="{0} : {1}",
	color = "255,255,255",
	tool.name="Method",
	tool.description="Method"
)
class Method extends ClassElement {
   attr boolean isAbstract;
   @gmf.compartment(foo="bar")
   val Parameter[*] parameters;
   attr String returns;
}

@gmf.node (label="name,type", figure="rectangle",
    label.icon="false", label.pattern="{0} : {1}",
	color = "255,255,255",
	tool.name="Attribute",
	tool.description="Attribute"
)
class Attribute extends ClassElement {
   attr String defaultValue;  
   attr String type; 
   attr Boolean secured;
}

@gmf.diagram(foo="bar")
class Diagram {
	val DiagramElement[*] diagramElements;
}

@gmf.node (
	label="name",
	label.icon="false",
	color = "255,255,255",
	tool.name="Package",
	tool.description="Package",
	figure = "rectangle"
)
class Package extends DiagramElement {
   val Package[*]#subPackage subPackages;
   @gmf.compartment(foo="bar")
   val ModelElement[*] modelElements;
   op String getFullName();
}

abstract class DiagramElement extends NamedElement{
}

abstract class ModelElement extends DiagramElement {
   
}

enum Visibility {
   public;
   private;
   protected;
}
@gmf.compartment(foo="bar")
class Parameter extends NamedElement{
   attr String type;
}
@gmf.node (
	label="name",
	label.icon="false",
	color = "255,255,255",
	tool.name="Enum",
	tool.description="Enum",
	figure = "rectangle"
)
class Enum extends ModelElement {
	@gmf.compartment(layout="list", collapsible="false")
	val EnumValue[*] values;
}
@gmf.node (
	label="name", figure="rectangle",
    label.icon="false",
	color = "255,255,255",
	tool.name="EnumValue",
	tool.description="EnumValue",
	figure = "rectangle"
)
class EnumValue extends NamedElement{
   attr int intValue;
}

abstract class Association extends ModelElement{
   attr String rolA;
   attr String rolB;
   attr int minMultiplicityA;
   attr int maxMultiplicityA;
   attr int minMultiplicityB;
   attr int maxMultiplicityB;
   ref AbstractClass[1]#associationA memberA;
   ref AbstractClass[1]#associationB memberB;
}

@gmf.link(
	label="name",
	source="memberA",
	target="memberB",
	color="0,0,0",
	tool.description="Agregation"
)
class Agregation extends Association {}

@gmf.link(
	label="name",
	source="memberA",
	target="memberB",
	color="0,0,0",
	source.decoration="rhomb",
	target.decoration="arrow",
	tool.description="Composition"
)
class Composition extends Association {}

@gmf.link(
	label="name",
	source="childClass",
	target="superClass",
	color="0,0,0",
	target.decoration="closedarrow",
	tool.description="Inheritance"
)
class Inheritance extends ModelElement {
   ref AbstractClass[1]#superclass superClass;
   ref AbstractClass[1]#childclass childClass;
}

@gmf.link(
	label="name",
	source="implements",
	target="implemented",
	color="0,0,0",
	tool.description="Implements"
)
class Implements extends ModelElement {
   ref Interface[1]#implemented implemented;
   ref AbstractClass[1]#implements implements;
}

class EVisibility {
	attr Visibility visibility;
}

@gmf.link(
	label="name",
	source="innerClass",
	target="container",
	color="0,0,0",
	tool.description="InnerClass"
)
class InnerClass extends ModelElement {
   ref AbstractClass[1]#innerClass innerClass;
   ref AbstractClass[1]#container container;
}